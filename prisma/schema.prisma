// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

// prisma/schema.prisma
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  confirmPassword       String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  
  products              Product[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  phone                 String?                // Optional field for phone number
  posts                 Post[]                 // One-to-many relation with Post
  comments              Comment[]              // One-to-many relation with Comment
  reply                 Reply[]
  postReactions         PostReaction[]         // One-to-many relation with PostReaction
  commentReactions      CommentReaction[]      // One-to-many relation with CommentReaction
  replyReactions        ReplyReaction[]        // One-to-many relation with ReplyReaction

 
  reviews               Review[]
  orders                Order[]
  categoryRequests      CategoryRequest[]
}


// schema.prisma
// schema.prisma

// Product Model
model Product {
  id            String      @id @default(cuid())
  name          String
  brand         String?     // Made optional since we have existing data
  description   String?     @db.Text
  price         Decimal     @db.Decimal(10, 2)
  sku           String?     @unique
  active        Boolean     @default(true)
  featured      Boolean     @default(false)
  stock         Int         @default(0)
  status        String      @default("active") // Kept for existing data, default changed to "active"
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  specifications Json?      // Store name-value pairs for specifications
  dimensions    Json?      // Store name-value pairs for dimensions
  colors        Json?      // Store name-value pairs for colors
  
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]

  categories    ProductCategory[]
  images        ProductImage[]
  reviews       Review[]

  @@index([userId])
}

// Category Model with hierarchical structure
model ProductCategory {
  id            String      @id @default(cuid())
  mainCategory  String
  subCategory   String?
  finalCategory String?
  description   String?     @db.Text
  slug          String      @unique
  
  // Products in this category
  products      Product[]

  // Metadata
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@unique([mainCategory, subCategory, finalCategory])
}

// Product Image Model
model ProductImage {
  id            String    @id @default(cuid())
  url           String
  publicId      String
  alt           String?
  order         Int       @default(0)
  
  // Product relationship
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([productId])
}

// Category Request Model (for new category requests)
model CategoryRequest {
  id            String    @id @default(cuid())
  mainCategory  String
  subCategory   String?
  finalCategory String?
  description   String    @db.Text
  status        String    @default("pending") // "pending" | "approved" | "rejected"
  
  // User who requested
  user          User      @relation(fields: [userId], references: [id])
  userId        String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

// Review Model
model Review {
  id            String    @id @default(cuid())
  rating        Int
  comment       String?   @db.Text
  
  // Relationships
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  user          User      @relation(fields: [userId], references: [id])
  userId        String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([productId])
  @@index([userId])
}

// Order Item Model
model OrderItem {
  id            String    @id @default(cuid())
  quantity      Int
  price         Decimal   @db.Decimal(10, 2)
  
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  
  order         Order     @relation(fields: [orderId], references: [id])
  orderId       String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([productId])
  @@index([orderId])
}

// Order Model
model Order {
  id            String      @id @default(cuid())
  status        String      // "pending" | "processing" | "completed" | "cancelled"
  total         Decimal     @db.Decimal(10, 2)
  
  // Relationships
  items         OrderItem[]
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
}




model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}






model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Post {
  id                    String                 @id @default(cuid())
  userId                String
  title                 String
  description           String?                @db.Text
  imageUrl              String?
  published             Boolean                @default(false)
  user                  User                   @relation(fields: [userId ], references: [id], onDelete: Cascade)
  category              String?


  tags                  Tag[]                  @relation("PostTags")
  comments              Comment[]              // One-to-many relation with Comment
  reply                 Reply[]
  reactions             PostReaction[]         // One-to-many relation with PostReaction
  postchapter           PostChapterSection[]       // One-to-many relation with ContentSection
  imageSections         PostImageSection[]         // One-to-many relation with ImageSection

  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt


}

model PostChapterSection {
  id                    String                 @id @default(cuid())
  title                 String
  postId                String
  description           String?                 @db.Text
  
  imageUrl              String?
  isPublished           Boolean                @default(false)
  isFree                Boolean                @default(false)
  position              Int                    // Position of the section within the post
  post                  Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}




model Comment {
  id                    String                 @id @default(cuid())
  userId                String
  comments               String?
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post                  Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId                String
  reactions             CommentReaction[]      // One-to-many relation with CommentReaction
  reply                 Reply[]
  createdAt             DateTime               @default(now())
}

model Reply {
  id                    String                 @id @default(cuid())
  userId                String
  replyContent          String?
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment               Comment                @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId             String
  post                  Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId                String
  reactions             ReplyReaction[]        // One-to-many relation with ReplyReaction
  createdAt             DateTime               @default(now())
}

model ReplyReaction {
  id                    String                 @id @default(cuid())
  userId                String                 // The user who reacted
  replyId               String                 // The reply being reacted to
  type                  ReactionType           // The type of reaction: like, dislike, love, etc.
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reply                 Reply                  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  createdAt             DateTime               @default(now())
}




model PostImageSection {
  id                    String                 @id @default(cuid())
  postId                String
  imageUrl              String                 // URL of the image
  caption               String?                // Optional caption for the image
  position              Int                    // Position of the image within the post
  post                  Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt             DateTime               @default(now())
}



model Tag {
  id                    String                 @id @default(cuid())
  name                  String                 @unique
  posts                 Post[]                 @relation("PostTags")
}

model PostReaction {
  id                    String                 @id @default(cuid())
  userId                String
  type                  ReactionType
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post                  Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId                String
  createdAt             DateTime               @default(now())
}

model CommentReaction {
  id                    String                 @id @default(cuid())
  userId                String
  type                  ReactionType
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment               Comment                @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId             String
  createdAt             DateTime               @default(now())
}



enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  LAUGH
  ANGRY
}









